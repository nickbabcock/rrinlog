trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

jobs:
  - job: 'Clippy'
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'rust:latest'
    steps:
      - script: rustup component add clippy
        displayName: Install clippy
      - script: cargo clippy --all
        displayName: Run Clippy

  - job: 'Rustfmt'
    pool:
      vmImage: 'ubuntu-16.04'
    container: 'rust:latest'
    condition: eq(variables['Build.Reason'], 'PullRequest')
    steps:
      - script: rustup component add rustfmt
        displayName: Install Rustfmt
      - script: cargo fmt --all -- --check
        displayName: Run fmt

  - job: 'Test'
    strategy:
      matrix:
        windows-stable:
          imageName: 'vs2017-win2016'
          rustup_toolchain: stable
        mac-stable:
          imageName: 'macos-10.13'
          rustup_toolchain: stable
        linux-stable:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: stable
        linux-beta:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: beta
        linux-nightly:
          imageName: 'ubuntu-16.04'
          rustup_toolchain: nightly
    pool:
      vmImage: $(imageName)
    steps:
      - script: |
          set -e
          curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: "Install rust (*nix)"
        condition: not(eq(variables['Agent.OS'], 'Windows_NT'))
      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --profile minimal --default-toolchain %RUSTUP_TOOLCHAIN%
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: "Install rust (windows)"
        condition: eq(variables['Agent.OS'], 'Windows_NT')
      - bash: |
          rustup default $RUSTUP_TOOLCHAIN
          rustup update $RUSTUP_TOOLCHAIN
        displayName: "Set correct Rust version"
      - script: cargo install diesel_cli --no-default-features --features sqlite-bundled
        displayName: Install dependencies
      - script: cargo build --all
        displayName: Cargo build
      - script: cargo test --all
        displayName: Cargo test

  - job: 'Cross'
    strategy:
      matrix:
        musl:
          target: 'x86_64-unknown-linux-musl'
          imageName: 'ubuntu-16.04'
        gnu:
          target: 'x86_64-unknown-linux-gnu'
          imageName: 'ubuntu-16.04'
        mac:
          target: 'x86_64-apple-darwin'
          imageName: 'macos-10.13'
    pool:
      vmImage: $(imageName)
    steps:
      - script: |
          DATE="$(date +%Y-%m-%d)"
          echo "##vso[task.setvariable variable=build.date]$DATE"
        displayName: "Create date variable"
      - script: |
          MY_TAG="$(Build.SourceBranch)"
          MY_TAG=${MY_TAG#refs/tags/}
          echo $MY_TAG
          echo "##vso[task.setvariable variable=build.my_tag]$MY_TAG"
        displayName: "Create my tag variable"
      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Install rust
      - script: cargo install --git https://github.com/rust-embedded/cross
        displayName: Install cross
      - script: cross build --release --all --target $TARGET
        displayName: Build
      - task: CopyFiles@2
        displayName: Copy assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
          contents: |
            rrinlog
            rrinlog-server
          targetFolder: '$(Build.BinariesDirectory)/rrinlog'
      - task: ArchiveFiles@2
        displayName: Gather assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/rrinlog'
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: '$(Build.ArtifactStagingDirectory)/rrinlog-$(build.my_tag)-$(TARGET).tar.gz'
      - task: GithubRelease@0
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        inputs:
          gitHubConnection: 'nickbabcock'
          repositoryName: 'nickbabcock/rrinlog'
          action: 'edit'
          target: '$(build.sourceVersion)'
          tagSource: 'manual'
          tag: '$(build.my_tag)'
          assets: '$(Build.ArtifactStagingDirectory)/rrinlog-$(build.my_tag)-$(TARGET).tar.gz'
          title: '$(build.my_tag) - $(build.date)'
          assetUploadMode: 'replace'
          addChangeLog: false
